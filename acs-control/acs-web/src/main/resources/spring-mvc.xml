<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:p="http://www.springframework.org/schema/p"  
	xmlns:mvc="http://www.springframework.org/schema/mvc"  
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
	http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.2.xsd
	http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd">
    
    <!-- 用于持有ApplicationContext,使用静态方法SpringContextHolder.getBean('xxx')得到Spring Bean对象
    <bean class="com.smdc.frame.webframe.utility.SpringContextHolder" lazy-init="false" scope="singleton"/>  -->   
    
     
     <!-- 启动注解驱动的Spring MVC功能，注册请求url和注解POJO类方法的映射-->
    <mvc:annotation-driven />
    
     <!-- 启动包扫描功能，以便注册带有@Controller、@Service、@repository、@Component等注解的类成为spring的bean -->
	<context:component-scan base-package="org.acs"></context:component-scan>

	
	<!-- 对模型视图名称的解析，在请求时模型视图名称添加前后缀 --> 
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" p:prefix="/WEB-INF/" p:suffix=".jsp" />
   	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">    
       <property name="defaultEncoding" value="UTF-8"/>   
       <property name="maxUploadSize" value="2147483648"/>     
    </bean>
    <!-- 允许对静态资源文件的访问 --> 
	<mvc:default-servlet-handler/>
	<mvc:interceptors>
	    <mvc:interceptor>
	        <!-- 匹配的是url路径， 如果不配置或/**,将拦截所有的Controller -->  
	        <mvc:mapping path="/**" />
	        <mvc:exclude-mapping path="/resources/**"/>
	        <bean class="org.acs.utils.interceptor.CommonInterceptor"></bean>    
	    </mvc:interceptor>  
    <!-- 当设置多个拦截器时，先按顺序调用preHandle方法，然后逆序调用每个拦截器的postHandle和afterCompletion方法 -->  
	</mvc:interceptors>
	
</beans>